import dataclasses

from src.services.carpet_search.models import CarpetFilters


@dataclasses.dataclass
class CarpetSearchMessages:
    """Centralized messages for carpet search functionality."""

    welcome_title: str = "üîç <b>–ü–æ–∏—Å–∫ –∫–æ–≤—Ä–æ–≤</b>"
    welcome_text: str = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–∏—Å–∫–∞ –∫–æ–≤—Ä–æ–≤!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∏—Å–∫–∞. "
        "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –æ–¥–Ω–æ–º —Ñ–∏–ª—å—Ç—Ä–µ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã "
        "–±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å c —É—á—ë—Ç–æ–º –ø—Ä–∏–º–µ–Ω—ë–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ."
    )

    # Filter titles
    filter_titles = {
        "geometry": "üìê –ì–µ–æ–º–µ—Ç—Ä–∏—è",
        "size": "üìè –†–∞–∑–º–µ—Ä",
        "color": "üé® –¶–≤–µ—Ç",
        "style": "‚ú® –°—Ç–∏–ª—å",
        "collection": "üìö –ö–æ–ª–ª–µ–∫—Ü–∏—è",
    }

    # Filter selection texts
    filter_selection_texts = {
        "geometry": "üìê <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–µ–æ–º–µ—Ç—Ä–∏—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ä–º:",
        "size": "üìè <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä–æ–≤:",
        "color": "üé® <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–≤–µ—Ç–æ–≤:",
        "style": "‚ú® <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–∏–ª–µ–π:",
        "collection": "üìö <b>–í—ã–±–µ—Ä–∏—Ç–µ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π:",
    }

    # Button texts
    show_results_button: str = "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"
    clear_all_filters_button: str = "üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã"
    clear_this_filter_button: str = "üóë –û—á–∏—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä"
    apply_and_back_button: str = "‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è"
    back_to_menu_button: str = "‚¨ÖÔ∏è –ö —Ñ–∏–ª—å—Ç—Ä–∞–º"

    # Results texts
    results_title: str = "üìã <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>"
    no_results_text: str = "üòî –ü–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∫–æ–≤—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã."
    results_summary_format: str = "–ù–∞–π–¥–µ–Ω–æ –∫–æ–≤—Ä–æ–≤: <b>{count}</b>"

    # Error messages
    error_loading_filters: str = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤"
    error_searching_carpets: str = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–≤—Ä–æ–≤"

    def get_main_menu_text(self, current_filters: CarpetFilters, total_carpets: int) -> str:
        """Get main menu text with current filter state."""
        text = f"{self.welcome_title}\n\n"

        if current_filters.is_empty():
            text += self.welcome_text
            text += f"\n\nüìä –í—Å–µ–≥–æ –∫–æ–≤—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: <b>{total_carpets}</b>"
        else:
            text += "üéØ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>\n"
            filter_summary = current_filters.get_filter_summary()
            for filter_name, values in filter_summary.items():
                values_text = ", ".join(values[:3])  # Show first 3 values
                if len(values) > 3:
                    values_text += f" –∏ –µ—â–µ {len(values) - 3}"
                text += f"‚Ä¢ {filter_name}: {values_text}\n"

            text += f"\nüìä –ù–∞–π–¥–µ–Ω–æ –∫–æ–≤—Ä–æ–≤: <b>{total_carpets}</b>"

        return text

    def get_filter_selection_text(
        self, filter_type: str, selected_count: int, total_options: int
    ) -> str:
        """Get filter selection text with selection info."""
        base_text = self.filter_selection_texts.get(filter_type, "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏–∏:")

        if selected_count > 0:
            base_text += f"\n\n‚úÖ –í—ã–±—Ä–∞–Ω–æ: <b>{selected_count}</b> –∏–∑ {total_options}"
        else:
            base_text += f"\n\nüìä –î–æ—Å—Ç—É–ø–Ω–æ –æ–ø—Ü–∏–π: <b>{total_options}</b>"

        return base_text

    def format_carpet_result(self, carpet) -> str:
        """Format carpet information for results display."""
        colors = []
        if carpet.color_1:
            colors.append(carpet.color_1)
        if carpet.color_2:
            colors.append(carpet.color_2)
        if carpet.color_3:
            colors.append(carpet.color_3)

        colors_text = ", ".join(colors) if colors else "–Ω–µ —É–∫–∞–∑–∞–Ω"

        return (
            f"üÜî <b>ID:</b> {carpet.carpet_id}\n"
            f"üìö <b>–ö–æ–ª–ª–µ–∫—Ü–∏—è:</b> {carpet.collection}\n"
            f"üìê <b>–ì–µ–æ–º–µ—Ç—Ä–∏—è:</b> {carpet.geometry}\n"
            f"üìè <b>–†–∞–∑–º–µ—Ä:</b> {carpet.size}\n"
            f"üé® <b>–¶–≤–µ—Ç–∞:</b> {colors_text}\n"
            f"‚ú® <b>–°—Ç–∏–ª—å:</b> {carpet.style}\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {carpet.price} —Ä—É–±.\n"
            f"üì¶ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {carpet.quantity} —à—Ç."
        )


messages = CarpetSearchMessages()
